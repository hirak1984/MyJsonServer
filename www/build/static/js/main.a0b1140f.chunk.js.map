{"version":3,"sources":["mycomponents/Helpers.js","mycomponents/VerticalTimelineContent1.js","mycomponents/MyComponent2.js","App.js","serviceWorker.js","index.js"],"names":["uniqueIdGenerator","text","Math","random","toString","substring","Date","now","sortDates","date1","date2","sortOrder","asc","indexOf","d1","d2","dateLabel","retVal","concat","startsWith","VerticalTimelineContent1","title","subHeaders","key","className","sort","sh1","sh2","DateFrom","map","sh","Title","DateTo","Texts","detail","ReactHtmlParser","MyComponent2","props","fetchData","axios","get","then","res","data","console","log","headers","setState","catch","err","state","this","d","contentStyle","styles","contentstyle","contentArrowStyle","date","iconStyle","background","color","icon","Component","borderRight","border","mozBoxShadow","webkitBoxShadow","boxShadow","App","ReactGA","initialize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a0b1140f.chunk.js","sourcesContent":["import React from 'react';\r\nexport const uniqueIdGenerator = (text = '') => text + Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n\r\nexport const sortDates = (date1, date2, sortOrder) => {\r\n    const asc = ['desc', 'descending', 'd'].indexOf(sortOrder) > -1 ? false : true;\r\n\r\n    if (date1 || date1 == null) {\r\n        return asc ? -1 : 1;\r\n    }\r\n    if (date2 || date2 == null) {\r\n        return asc ? 1 : -1;\r\n    }\r\n\r\n    const d1 = new Date(date1);\r\n    const d2 = new Date(date2);\r\n    return asc ? d1 - d2 : d2 - d1;\r\n};\r\nexport const dateLabel = (d1, d2) => {\r\n    let retVal = '';\r\n    if (d1 && d1 != null) {\r\n        retVal = retVal.concat(d1.startsWith('-') ? d1.substring(0, 5) : d1.substring(0, 4));\r\n    }\r\n    if (d2 && d2 != null) {\r\n\r\n        retVal = retVal.concat(' - ',\r\n            d2.startsWith('-') ? d2.substring(1, 4) : d2.substring(0, 4));\r\n    }\r\n    return <span > < b > { retVal } < /b></span > ;\r\n}","import React from 'react'\r\nimport { uniqueIdGenerator, sortDates, dateLabel } from './Helpers';\r\nimport ReactHtmlParser from 'react-html-parser'; \r\nconst VerticalTimelineContent1 = ({ title, subHeaders }) => {\r\n    return (\r\n        <div key = {uniqueIdGenerator(title)}>\r\n            <center><h3 className=\"vertical-timeline-element-title\">{title}</h3></center>\r\n            {subHeaders.sort((sh1, sh2) => sortDates(sh1.DateFrom, sh2.DateFrom, '')).map(sh => {\r\n                return (<>\r\n                    <h4  className=\"vertical-timeline-element-subtitle\">{sh.Title}</h4>\r\n                    <h5  className=\"vertical-timeline-element-subtitle\">{dateLabel(sh.DateFrom, sh.DateTo)}</h5>\r\n               <ul> {sh.Texts.map(detail => <li key={uniqueIdGenerator(detail)} >{ReactHtmlParser (detail) }</li>)}</ul>\r\n                </>)\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VerticalTimelineContent1;\r\n","import React, { Component } from 'react';\r\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\r\nimport 'react-vertical-timeline-component/style.min.css';\r\nimport './mycss2.css';\r\nimport { FaCanadianMapleLeaf as MapleLeaf } from 'react-icons/fa';\r\nimport VerticalTimelineContent from './VerticalTimelineContent1';\r\nimport axios from 'axios';\r\nimport { uniqueIdGenerator, sortDates, dateLabel } from './Helpers';\r\n//import queryString from 'query-string';\r\n\r\nexport class MyComponent2 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { title: \"\", data: [] };\r\n    }\r\n    fetchData = () => {\r\n        let url = 'https://raw.githubusercontent.com/hirak1984/VariousTimelines/master/data/json/CanadaHistory.json';\r\n        axios.get(url)\r\n            .then(res => {\r\n                const data = res.data;\r\n                console.log(data);\r\n                console.log(data.Title);\r\n                console.log(data.headers);\r\n                this.setState({ title: data.Title, data: data.headers });\r\n            }).catch(err => console.log(err))\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n    render() {\r\n        //const {sortOrder} = queryString.parse(this.props.location.search)\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"leftpane\">\r\n                        &nbsp;\r\n                       \r\n                </div>\r\n                <div className=\"middlepane\">\r\n                    <center > < h3 > {this.state.title} </h3></center> < hr />\r\n                    <VerticalTimeline > {\r\n                        this.state.data.sort((d1, d2) => sortDates(d1.DateFrom, d2.DateFrom, '')).map(d => {\r\n                            return (< VerticalTimelineElement className=\"vertical-timeline-element--work\"\r\n                                contentStyle={styles.contentstyle}\r\n                                contentArrowStyle={styles.contentArrowStyle}\r\n                                date={dateLabel(d.DateFrom, d.DateTo)}\r\n                                key={uniqueIdGenerator(d.DateFrom)}\r\n                                iconStyle={\r\n                                    { background: '#EF3340', color: '#fff' }\r\n                                }\r\n                                icon={< MapleLeaf/>} >\r\n                                <VerticalTimelineContent key={uniqueIdGenerator(d.Title)}\r\n                                    title={d.Title}\r\n                                    subHeaders={d.subHeaders} />\r\n                            </VerticalTimelineElement >\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    </VerticalTimeline>\r\n                </div >\r\n                <div className=\"rightpane\">&nbsp;</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n  const styles= {\r\n    contentArrowStyle: {\r\n        borderRight: '20px solid  #EF3340'\r\n    },\r\n    contentstyle: {\r\n        background:'#fff', \r\n        border: '2px solid  #EF3340',\r\n        color: '#000' ,\r\n        mozBoxShadow:'1px 1px 5px rgba(33,33,33,1)',\r\n        webkitBoxShadow: '1px 1px 5px rgba(33,33,33,.7)',\r\n        boxShadow: '1px 1px 5px rgba(33,33,33,.7)'\r\n    }\r\n};\r\nexport default MyComponent2;","import React from \"react\";\nimport { BrowserRouter as Router, Route,Redirect ,Switch,Link  } from \"react-router-dom\";\nimport MyComponent from './mycomponents/MyComponent2'\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-11039602-8');\n\nexport default function App() {\n  return <MyComponent/>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}